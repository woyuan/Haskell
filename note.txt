 函数是一等公民。
在计算机科学中，闭包（英语：Closure），又称词法闭包（LexicalClosure）或函数闭包（functionclosures），是引用了自由变量的函数。

  闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。

 pattern match模式匹配，通过检查数据的结构来检查是否匹配

 有模式匹配省了很多中间变量名

  immutability 不变性，说起来有语法上的不变性和运行时的不变性
就算不是并发处理的情况, 如果所有对象都 immutable, 手动的保护性拷贝都可以去掉, 处理复杂业务会更简单快速.

LLVM 命名最早源自于底层虚拟机（Low Level Virtual Machine）的缩写

  LLVM 是 Illinois 大学发起的一个开源项目，和之前为大家所熟知的JVM 以及 .net Runtime这样的虚拟机不同，这个虚拟系统提供了一套中立的中间代码和编译基础设施，并围绕这些设施提供了一套全新的编译策略（使得优化能够在编译、连接、运行环境执行过程中，以及安装之后以有效的方式进行）和其他一些非常有意思的功能

  对象实例 immutable 了 GC 能更简化. 因为只有新对象指向老对象, 老对象不能指向新对象, 对实现分代 GC 的人来说真是一个天堂

  在 immutable 的环境里还有什么好处? 就是没有环引用! 不用做环检测不用加弱引用,

  组件和对象会不会比 immutable 更适合 GUI 编程? 现状是 functional language 在 GUI 库上面还不够成熟, 但应用 functional 概念架构的 GUI 反而速度更快更稳定, 在 web 前端框架上面已经逐渐体现了, 例如 swannodette/om · GitHub 和 Raynos/mercury · GitHub. 用 Om 实现一个历史后退的功能真的清爽容易到了极点.

 函数式语言中常用的 list 也受限于当前的 CPU 架构体系, locality 没有 array 好, 不过很多 list 中使用的 idiom 也可以直接应用到 array 上, 问题不大.


 单纯的说函数式编程比过程式编程更好其实并不令人非常信服,很多函数式语言（如scheme）实际上支持过程。虽然纯粹的函数式在理论上比较诱人（总能保证相同的输入给出相同的输出），并且实作出了Haskell这种纯函数式语言，但是由于没有状态，在很多情况下会给开发过程造成极大的不便。
